{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#cookiecutter-chic-pypackage","title":"Cookiecutter Chic PyPackage","text":"<p>A chic Cookiecutter template for scaffolding Python packages and apps. \"Chic\" denotes stylishness and sophistication, suitable for a sleek cookiecutter template to generate Python packages backbone.</p> <p>Check My Awesome Package Name for an example of a Python package and app that has been generated with this template.</p>"},{"location":"#-out-of-the-box-features","title":"\ud83d\udca1 Out-of-the box Features","text":"<ul> <li>\ud83d\udce6 Packaging and dependency management with Poetry</li> <li>\u26a1 Task running with Poe the Poet</li> <li>\u2728 Code formatting with Ruff</li> <li>\ud83e\uddf9 Code linting with Pre-commit, Mypy, and Ruff</li> <li>\ud83c\udff7 Optionally follows the Conventional Commits standard to automate Semantic Versioning and Keep A Changelog with Commitizen</li> <li>\u2705 Verified commits with GPG</li> <li>\ud83d\udd04 Continuous integration with GitHub Actions</li> <li>\ud83e\uddea Testing with pytest and Test coverage with Coverage.py</li> <li>\ud83c\udfd7 Scaffolding updates with Cookiecutter and Cruft</li> <li>\ud83e\uddf0 Dependency updates with Dependabot</li> <li>\u2328\ufe0f Command-line interface with Typer</li> <li>\ud83d\udcd6 Writting documentation in markdown style with Mkdocs, Auto API doc generation and docstring template with Mkdocstrings</li> <li>\ud83c\udf10 Host the documentation from GitHub Pages with zero-config</li> </ul>"},{"location":"#-credits","title":"\ud83c\udf1f Credits","text":"<ul> <li>Cookiecutter template for a modern Python packag: fedejaure/cookiecutter-modern-pypackage</li> <li>\ud83d\udc0d A modern Cookiecutter template for scaffolding Python packages and apps: radix-ai/poetry-cookiecutter</li> <li>Hypermodern Python Cookiecutter: cjolowicz/cookiecutter-hypermodern-python</li> </ul>"},{"location":"template_params/","title":"Template Parameters","text":""},{"location":"template_params/#-template-parameters","title":"\ud83e\udd13 Template parameters","text":"Parameter Description <code>package_name</code>   \"My Awesome Package Name\" The name of the package. Will be slugified to <code>snake_case</code> for importing and <code>kebab-case</code> for installing. For example, <code>My Package</code> will be <code>my_package</code> for importing and <code>my-package</code> for installing. <code>package_description</code>   \"This Python package is so awesome, it practically codes itself... and then makes coffee\" A single-line description of the package. <code>github_username</code> \"janelovepython\" The GitHub account name where the package will be. <code>package_url</code>   \"https://github.com/janelovepython/my-awesome-package-name\" The URL to the package's repository. <code>author_name</code>   \"Jane Smith\" The full name of the primary author of the package. <code>author_email</code>   \"jane@example.com\" The email address of the primary author of the package. <code>python_version</code>   \"3.12\" The minimum Python version that the package requires. <code>docker_image</code>   \"python:$PYTHON_VERSION-slim\" The base Docker image to use for the Dev Container and application. The $PYTHON_VERSION build argument is equal to the <code>python_version</code> value by default, but may be overridden when building the image to test different Python versions. If CUDA support is required, you may use radixai/python-gpu:$PYTHON_VERSION-cuda11.8. <code>development_environment</code>   [\"simple\", \"strict\"] Whether to configure the development environment with a focus on simplicity or with a focus on strictness. In strict mode, additional Ruff rules are added, and tools such as Mypy and Pytest are set to strict mode. <code>with_conventional_commits</code>   [\"0\", \"1\"] If \"1\", Commitizen will verify that your commits follow the Conventional Commits standard. In return, <code>cz bump</code> may be used to automate Semantic Versioning and Keep A Changelog. <code>with_fastapi_api</code>   [\"0\", \"1\"] If \"1\", FastAPI is added as a run time dependency, FastAPI API stubs and tests are added, a <code>poe api</code> command for serving the API is added, and an <code>app</code> stage that packages the API is added to the Dockerfile. Additionally, the CI workflow will push the application as a Docker image instead of publishing the Python package. <code>with_jupyter_lab</code>   [\"0\", \"1\"] If \"1\", JupyterLab is added to Poetry's dev dependencies, and a <code>poe lab</code> command is added to start Jupyter Lab in the <code>notebooks/</code> directory. <code>with_pydantic_typing</code>   [\"0\", \"1\"] If \"1\", Pydantic is added as a run time dependency, and the Pydantic mypy plugin is enabled and configured. <code>with_streamlit_app</code>   [\"0\", \"1\"] If \"1\", Streamlit is added as a run time dependency, a Streamlit application stub is added, a <code>poe app</code> command to serve the Streamlit app is added, and an <code>app</code> stage that packages the Streamlit app is added to the Dockerfile. Additionally, the CI workflow will push the application as a Docker image instead of publishing the Python package. <code>with_typer_cli</code>   [\"0\", \"1\"] If \"1\", Typer is added as a run time dependency, Typer CLI stubs and tests are added, the package itself is registered as a CLI, and an <code>app</code> stage is added to the Dockerfile that packages the CLI. <code>with_mkdocs</code>  [\"0\", \"1\"] If \"1\",  Mkdocs is added to Poetry's doc dependencies, and a GitHub action is added to update the GitHub Pages <code>with_code_of_conduct</code>  [\"0\", \"1\"] If \"1\",  A <code>CODE_OF_CONDUCT.md</code> file is added <code>with_contributing_file</code>  [\"0\", \"1\"] If \"1\",  A <code>CONTRIBUTING</code> file is added <code>with_security_file</code>  [\"0\", \"1\"] If \"1\",  A <code>SECURITY.md</code> file is added"},{"location":"usage/","title":"Usage","text":""},{"location":"usage/#-how-to-use-","title":"\ud83d\ude80 How to use ?","text":"<p>If you're looking for a straightforward way to create projects without needing to update them later with changes made to the original template, using Cookiecutter is recommended. In fact, you can always switch to cruft at a later date.</p>"},{"location":"usage/#usage-with-cookiecutter","title":"Usage with Cookiecutter","text":""},{"location":"usage/#create-a-new-python-project-with-this-template","title":"Create a new Python project with this template:","text":"<ol> <li>Install cookiecutter using your prefered package manager</li> </ol> <p>The recommended way to use Cookiecutter as a command line utility is to run it with <code>pipx</code>, which can be installed with <code>pip install pipx</code>, but if you plan to use Cookiecutter programmatically, please run <code>pip install cookiecutter</code> inside your virtual environement.</p> <p><pre><code>pipx install cookiecutter\n</code></pre> 2. Create a new repository for your Python project</p> <p>The system will request that you input certain details. Following your inputs, it will generate a Python package within the existing directory, tailored to the information you've provided. To keep things concise, repositories on GitHub may simply adopt the 'gh' prefix</p> <p>Use a GitHub template</p> <pre><code>pipx run cookiecutter gh:ibmw/cookiecutter-chic-pypackage\n</code></pre> <p>Use a local template</p> <pre><code>pipx run cookiecutter cookiecutter-chic-pypackage/\n</code></pre> <p>Use it from Python</p> <pre><code>from cookiecutter.main import cookiecutter\n\n# Create project from the cookiecutter-chic-pypackage/ template\ncookiecutter('cookiecutter-chic-pypackage/')\n\n# Create project from the ibmw/cookiecutter-chic-pypackage.git repo template\ncookiecutter('gh:ibmw//cookiecutter-chic-pypackage.git')\n</code></pre>"},{"location":"usage/#to-use-cookiecutter-programmatically","title":"To use Cookiecutter programmatically","text":"<p>This repository is already configured with poetry, to install in full mode:</p>"},{"location":"usage/#1poetry-install---with-devtestdocs---no-root","title":"<pre><code>poetry install --with dev,test,docs --no-root\n</code></pre>","text":""},{"location":"usage/#advanced-usage-with-cruft","title":"Advanced usage with Cruft","text":"<p>Compare to Cookicutter, the main additionnal feature is the Automatic Template Updates, cruft automates the process of updating code to match the latest version of a template, making it easy to utilize template improvements across many projects.</p> <p>This repository is already configured with Poetry.</p>"},{"location":"usage/#creating-a-new-python-project","title":"Creating a new Python project","text":"<p>To create a new Python project with this template:</p> <ol> <li>Install cruft using your prefered python package manager</li> </ol> <pre><code>poetry install --no-root\n</code></pre> <ol> <li>Create a new repository for your Python project</li> </ol> <p>Upon providing required details, the system will generate a Python package in the current directory, customized with your inputs. Behind the scenes, cruft uses Cookiecutter to do the project expansion. The output will be identical except for the inclusion of a .cruft.json file, which holds the git hash of the template used and the variables you specified for the template.</p> <pre><code>poetry run cruft create -f https://github.com/ibmw/cookiecutter-chic-pypackage\n</code></pre>"},{"location":"usage/#updating-your-python-project","title":"Updating your Python project","text":"<p>To update your Python project with the latest template:</p> <ol> <li>Run <code>cruft update</code> to update your project with the latest template.</li> <li>If any of the updates failed, resolve them by inspecting the generated <code>.rej</code> files.</li> </ol>"},{"location":"usage/#linking-an-existing-cookiecutter-project","title":"Linking an Existing Cookiecutter Project","text":"<p>If you previously created a project from this template directly with Cookiecutter, you can associate it with the original template by using:</p> <pre><code>poetry run cruft link -f https://github.com/ibmw/cookiecutter-chic-pypackage\n</code></pre> <p>Next, you have the option to designate the most recent commit of the template that the project has been synchronized with or choose to automatically align with the latest commit from the template as the default.</p>"}]}