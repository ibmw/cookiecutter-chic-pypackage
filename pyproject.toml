[tool.poetry]
name = "cookiecutter-chic-pypackage"
version = "1.1.0"
description = "\"Chic\" denotes stylishness and sophistication, suitable for a sleek cookiecutter template to generate Python packages backbone."
authors = ["Olivier Maillot <maillot.olivier@gmail.com>"]
license = "AGPL-3.0 license"
readme = "README.md"

[tool.poetry.dependencies]
python = "^3.12"
cruft = "^2.15.0"

[tool.poetry.group.dev]
optional = true

[tool.poetry.group.dev.dependencies]
pre-commit = "^3.6.0"
commitizen = "^3.14.1"
ruff = "^0.2.1"
mypy = "^1.8.0"

[tool.poetry.group.test]
optional = true

[tool.poetry.group.test.dependencies]
pytest = "^8.0.0"
pytest-cov = "^4.1.0"
pytest-cookies = "^0.7.0"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
mkdocs = "^1.5.3"
mkdocs-material = "^9.5.8"
mkdocs-material-extensions = "^1.3.1"
mkdocs-include-markdown-plugin = "^6.0.4"

[tool.mypy]
warn_return_any = true
warn_unused_configs = true
exclude = "{{ cookiecutter.__package_name_kebab_case }}"

[[tool.mypy.overrides]]
module = ["cookiecutter.*", "pytest.*", "pytest_cookies.*", "invoke.*", "nox.*", "nox_poetry.*"]
allow_redefinition = false
check_untyped_defs = true
ignore_errors = false
ignore_missing_imports = true
implicit_reexport = true
local_partial_types = true
strict_optional = true
strict_equality = true
no_implicit_optional = true
warn_unused_ignores = true
warn_unreachable = true
warn_no_return = true

[tool.ruff]
select = [
    "E",    # pycodestyle
    "F",    # pyflakes
    "W",    # pycodestyle (warnings)
    "I",    # isort
    "N",    # pep8-naming
    "UP",   # pyupgrade
    "ANN",  # flake8-annotations
    "B",    # flake8-bugbear
    "A",    # flake8-builtins
    "COM",  # flake8-commas
    "C4",   # flake8-comprehensions
    "DTZ",  # flake8-datetimez
    "EXE",  # flake8-executable
    "PIE",  # flake8-pie
    "T20",  # flake8-print
    "PT",   # flake8-pytest
    "SIM",  # flake8-simplify
    "ARG",  # flake8-unused-arguments
    "PTH",  # flake8--use-pathlib
    "ERA",  # flake8-eradicate
    "RUF",  # ruff specific rules
    "PL",   # pylint
]
ignore = [
    "ANN101", # Missing type annotation for self in method
    "ANN204", # Missing type annotation for special method
]
line-length = 88
target-version = "py311"
extend-exclude = ["src/*"]

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.commitizen]  # https://commitizen-tools.github.io/commitizen/config/
bump_message = "bump(release): v$current_version â†’ v$new_version"
tag_format = "v$version"
update_changelog_on_bump = true
version = "1.0.0"
version_files = ["pyproject.toml:version"]

[virtualenvs]
create = true
in-project = true